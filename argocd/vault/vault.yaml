kind: ServiceAccount
apiVersion: v1
metadata:
  name: vault
  namespace: vault-dev

---

kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: vault-secrets
  namespace: vault-dev
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - "*"
  - apiGroups: [""]
    resources: ["pods"]
    verbs: ["get", "update", "patch"]
---

kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: vault-secrets
  namespace: vault-dev
roleRef:
  kind: Role
  name: vault-secrets
  apiGroup: rbac.authorization.k8s.io
subjects:
  - kind: ServiceAccount
    name: vault

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: vault-auth-delegator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - kind: ServiceAccount
    name: vault
    namespace: default
---
apiVersion: vault.banzaicloud.com/v1alpha1
kind: Vault
metadata:
  name: vault
  namespace: vault-dev
  labels:
    app.kubernetes.io/name: vault
    vault_cr: vault
spec:
  size: 3
  ingress:
    annotations:
      kubernetes.io/ingress.class: "alb"
      alb.ingress.kubernetes.io/load-balancer-name: "vault-alb"
      alb.ingress.kubernetes.io/group.name: "vault-alb"
      alb.ingress.kubernetes.io/certificate-arn: "arn:aws:acm:ca-central-1:429310424269:certificate/632ccd51-cdc6-453b-9f27-6133aa70685c"
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}]'
      alb.ingress.kubernetes.io/backend-protocol: "HTTPS"
      alb.ingress.kubernetes.io/scheme: "internet-facing"
      alb.ingress.kubernetes.io/subnets: "subnet-0f26715c99655dc08 ,subnet-0452a294e59e69c1f,subnet-028c0e7290dd0a584"
      alb.ingress.kubernetes.io/target-type: "ip"
  image: hashicorp/vault:1.14.8
  annotations:
    common/annotation: "true"
  vaultAnnotations:
    type/instance: "vault"
  vaultConfigurerAnnotations:
    type/instance: "vaultconfigurer"
  vaultLabels:
    example.com/log-format: "json"
  vaultConfigurerLabels:
    example.com/log-format: "string"
  serviceAccount: vault
  volumeClaimTemplates:
    - metadata:
        name: vault-raft
      spec:
        accessModes:
          - ReadWriteOnce
        volumeMode: Filesystem
        resources:
          requests:
            storage: 1Gi
  volumeMounts:
    - name: vault-raft
      mountPath: /vault/file
  veleroEnabled: true
  caNamespaces:
    - "vswh"
  unsealConfig:
    options:
      preFlightChecks: true
      storeRootToken: true
      secretShares: 5
      secretThreshold: 3
    kubernetes:
      secretNamespace: vault-dev
  config:
    storage:
      raft:
        path: "/vault/file"
    listener:
      tcp:
        address: "0.0.0.0:8200"
        tls_cert_file: /vault/tls/server.crt
        tls_key_file: /vault/tls/server.key
    api_addr: https://vault.vault-dev:8200
    cluster_addr: "https://${.Env.POD_NAME}:8201"
    ui: true
  statsdDisabled: true
  serviceRegistrationEnabled: true
  resources:
    vaultConfigurer:
      limits:
        memory: "128Mi"
        cpu: "50m"
      requests:
        memory: "64Mi"
        cpu: "25m"
  externalConfig:
    policies:
      - name: allow_secrets
        rules: path "secret/*" {
          capabilities = ["create", "read", "update", "delete", "list"]
          }
    auth:
      - type: kubernetes
        roles:
          - name: default
            bound_service_account_names: ["default", "secrets-webhook"]
            bound_service_account_namespaces: ["default", "vswh"]
            policies: allow_secrets
            ttl: 1h
