name: Build and Release CLI

on:
  push:
    branches: [ master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: Build CLI
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Build
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          # Create output directory
          mkdir -p dist
          
          # Set binary name based on OS
          if [ "$GOOS" = "windows" ]; then
            BINARY_NAME="vault-promoter.exe"
          else
            BINARY_NAME="vault-promoter"
          fi
          
          # Build the binary with proper flags for each platform
          CGO_ENABLED=0 go build -ldflags="-s -w" -o dist/${BINARY_NAME} ./cmd/cli
          
          # Copy the example config file to dist directory
          cp .vaultconfigs.example dist/
          
          # Create archive with platform-specific naming
          if [ "$GOOS" = "windows" ]; then
            cd dist && zip vault-promoter-${{ matrix.goos }}-${{ matrix.goarch }}.zip ${BINARY_NAME} .vaultconfigs.example && cd ..
          else
            cd dist && tar -czvf vault-promoter-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz ${BINARY_NAME} .vaultconfigs.example && cd ..
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: vault-promoter-${{ matrix.goos }}-${{ matrix.goarch }}
          path: dist/*
          if-no-files-found: error

  release:
    name: Create Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: List all artifacts
        run: find artifacts -type f | sort

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*
          draft: false
          prerelease: false
          generate_release_notes: true
          body: |
            ## Vault Promoter CLI Release
            
            ### Executables
            - Windows: `vault-promoter-windows-amd64.zip`, `vault-promoter-windows-arm64.zip`
            - macOS: `vault-promoter-darwin-amd64.tar.gz`, `vault-promoter-darwin-arm64.tar.gz`
            - Linux: `vault-promoter-linux-amd64.tar.gz`, `vault-promoter-linux-arm64.tar.gz`
            
            Each archive contains the executable and an example config file (.vaultconfigs.example).
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-executables:
    name: Publish Standalone Executables
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: executables
      
      - name: List executables
        run: find executables -type f | sort
      
      - name: Prepare executables for publishing
        run: |
          mkdir -p dist
          rm -rf dist/*  # Ensure the directory is empty
          
          # Process each platform's archive and extract with unique names
          for platform_dir in executables/vault-promoter-*; do
            platform=$(basename "$platform_dir")
            
            # Handle zip files (Windows)
            if [ -f "$platform_dir/vault-promoter-$platform.zip" ]; then
              # Create a temporary directory for extraction
              mkdir -p temp_extract
              unzip -o "$platform_dir/vault-promoter-$platform.zip" -d temp_extract/
              
              # Copy and rename the executable with platform suffix
              if [ -f temp_extract/vault-promoter.exe ]; then
                cp temp_extract/vault-promoter.exe "dist/vault-promoter-$platform.exe"
              fi
              
              # Copy config example with platform suffix
              if [ -f temp_extract/.vaultconfigs.example ]; then
                cp temp_extract/.vaultconfigs.example "dist/vaultconfigs-example-$platform.txt"
              fi
              
              # Also keep the original archive
              cp "$platform_dir/vault-promoter-$platform.zip" dist/
              
              # Clean up
              rm -rf temp_extract
            fi
            
            # Handle tar.gz files (Linux/macOS)
            if [ -f "$platform_dir/vault-promoter-$platform.tar.gz" ]; then
              # Create a temporary directory for extraction
              mkdir -p temp_extract
              tar -xzf "$platform_dir/vault-promoter-$platform.tar.gz" -C temp_extract/
              
              # Copy and rename the executable with platform suffix
              if [ -f temp_extract/vault-promoter ]; then
                cp temp_extract/vault-promoter "dist/vault-promoter-$platform"
              fi
              
              # Copy config example with platform suffix
              if [ -f temp_extract/.vaultconfigs.example ]; then
                cp temp_extract/.vaultconfigs.example "dist/vaultconfigs-example-$platform.txt"
              fi
              
              # Also keep the original archive
              cp "$platform_dir/vault-promoter-$platform.tar.gz" dist/
              
              # Clean up
              rm -rf temp_extract
            fi
          done
          
          echo "Contents of dist directory:"
          ls -la dist/
      
      - name: Upload executables to GitHub Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: standalone-executables
          path: dist/
          retention-days: 30
      
      - name: Publish executables to GitHub Releases
        if: startsWith(github.ref, 'refs/tags/v')
        uses: softprops/action-gh-release@v1
        with:
          files: dist/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    name: Build and Push Docker Image
    needs: build
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
